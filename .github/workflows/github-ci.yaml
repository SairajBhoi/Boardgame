name: Java CI with SonarQube

on:
  pull_request:
    branches:
      - dev

jobs:
  build-and-sonarqube:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: temurin

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Fetch SonarQube credentials from SSM
        run: |
          echo "Fetching SonarQube credentials from AWS SSM..."
          SONAR_TOKEN=$(aws ssm get-parameter --name "/boardgame/sonarqube/token" --with-decryption --query "Parameter.Value" --output text)
          SONAR_URL=$(aws ssm get-parameter --name "/boardgame/sonarqube/url" --with-decryption --query "Parameter.Value" --output text)
          SONAR_PROJECT_KEY=$(aws ssm get-parameter --name "/boardgame/sonarqube/project_key" --with-decryption --query "Parameter.Value" --output text)
          SONAR_PROJECT_NAME=$(aws ssm get-parameter --name "/boardgame/sonarqube/project_name" --with-decryption --query "Parameter.Value" --output text)
          
          # Export variables for subsequent steps
          echo "SONAR_TOKEN=$SONAR_TOKEN" >> $GITHUB_ENV
          echo "SONAR_URL=$SONAR_URL" >> $GITHUB_ENV
          echo "SONAR_PROJECT_KEY=$SONAR_PROJECT_KEY" >> $GITHUB_ENV
          echo "SONAR_PROJECT_NAME=$SONAR_PROJECT_NAME" >> $GITHUB_ENV

      - name: SonarQube Scan
        run: |
          sonar-scanner \
            -Dsonar.projectKey=$SONAR_PROJECT_KEY \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.projectName=$SONAR_PROJECT_NAME \
            -Dsonar.java.binaries=.

      - name: Build Docker image
        run: docker build -t boardgame-app:latest .
